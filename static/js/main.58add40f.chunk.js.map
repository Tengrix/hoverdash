{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","colors","newArr","squareHandlerOn","e","color","Math","floor","random","length","currentTarget","style","backgroundColor","boxShadow","squareHandlerLeave","i","push","onMouseLeave","onMouseOver","className","map","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKA8BeA,MA3Bf,WAcI,IAbA,IAAMC,EAAS,CAAC,UAAU,UAAU,UAAU,UAAU,UAAW,UAAU,UAAW,WAClFC,EAAS,GAGTC,EAAkB,SAACC,GACrB,IAAIC,EAAQJ,EAAOK,KAAKC,MAAMD,KAAKE,SAASP,EAAOQ,SACnDL,EAAEM,cAAcC,MAAMC,gBAAtB,UAA2CP,GAC3CD,EAAEM,cAAcC,MAAME,UAAtB,kBAA6CR,EAA7C,wBAAkEA,IAEhES,EAAqB,SAACV,GACxBA,EAAEM,cAAcC,MAAMC,gBAAkB,GACxCR,EAAEM,cAAcC,MAAME,UAAtB,gBAEIE,EAAI,EAAGA,EAXE,IAWWA,IACxBb,EAAOc,KAAK,qBAAKC,aAAcH,EAAoBI,YAAaf,EAAiBgB,UAAW,YAEhG,OACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAW,YAAhB,SAEKjB,EAAOkB,KAAI,SAAAC,GAAE,OAAE,8BAAMA,YCVvBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.58add40f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n    const colors = ['#0066CC','#00CC66','#6600CC','#FF9933','#66FF66', '#FF3333','#FFFF33', '#FFFF99']\n    const newArr = []\n    const numOfDiv = 500\n\n    const squareHandlerOn = (e:React.MouseEvent<HTMLDivElement>) => {\n        let color = colors[Math.floor(Math.random()*colors.length)]\n        e.currentTarget.style.backgroundColor = `${color}`\n        e.currentTarget.style.boxShadow = `0 0 2px ${color}, , 0 0 10px ${color}`\n    }\n    const squareHandlerLeave = (e:React.MouseEvent<HTMLDivElement>) => {\n        e.currentTarget.style.backgroundColor = ''\n        e.currentTarget.style.boxShadow = `0 0 2px #000`\n    }\n    for(let i = 0; i < numOfDiv;i++){\n        newArr.push(<div onMouseLeave={squareHandlerLeave} onMouseOver={squareHandlerOn} className={'square'}/>)\n    }\n    return (\n        <div className=\"App\">\n            <div className={'container'}>\n\n                {newArr.map(el=><div>{el}</div>)}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}